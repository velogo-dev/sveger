import { AxiosInstance, AxiosRequestConfig } from 'axios';
import * as Types from '../types';

/**
 * @description {{.Description}}
 * @tags {{.Tags}}
 * @name {{.Name}}
 * @summary {{.Summary}}
 * @request {{.HttpMethod}}:{{.Path}}
 */
export const {{.Name}} = (client: AxiosInstance) => ({{if .HasQueryParams}}
  query?: {
{{range .QueryParams}}    /** {{.Description}} */
    {{.Name}}?: {{.Type}};
{{end}}  },{{end}}{{if .HasPathParams}}{{range .PathParams}}
  {{.Name}}: {{.Type}},{{end}}{{end}}{{if .HasRequestBody}}
  data: {{.RequestBodyType}},{{end}}
  config?: AxiosRequestConfig,
) => {
{{if .HasQueryParams}}  const requestConfig: AxiosRequestConfig = { ...config };
  if (query) {
    requestConfig.params = { ...requestConfig.params };
{{range .QueryParams}}    if (query.{{.Name}} !== undefined) {
      requestConfig.params['{{.Name}}'] = query.{{.Name}};
    }
{{end}}  }
{{else}}  const requestConfig: AxiosRequestConfig = { ...config };
{{end}}
  return client.{{.Method}}<{{.ReturnType}}>(
    `{{.PathTemplate}}`{{if .HasPathParams}}{{range .PathParams}}.replace('{{`{`}}{{.Name}}{{`}`}}', String({{.Name}})){{end}}{{end}},{{if .HasRequestBody}}
    data,{{end}}
    requestConfig,
  ).then(response => response.data);
};